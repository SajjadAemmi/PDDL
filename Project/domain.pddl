(define (domain besco)
  (:requirements :strips :equality)
  (:predicates
	       (at ?thing ?place)
	       (sentinel ?s)
	       (wall ?x)
	       (box ?c)
	       (block ?b)
	       (empty ?b)
	       (isup ?u ?d)
	       (isright ?r ?l))
	       
  (:action GoUp
	     :parameters (?thing ?from ?to)
	     :precondition (and (isup ?to ?from)
				 (at ?thing ?from)
				 (block ?from)
				 (block ?to)
				 (empty ?to)
				 (sentinel ?thing)
				 (not (= ?from ?to)))
	     :effect (and (at ?thing ?to) (not (at ?thing ?from)) (empty ?from) (not (empty ?to))))
	     
  (:action GoDown
	     :parameters (?thing ?from ?to)
	     :precondition (and (isup ?from ?to)
				 (at ?thing ?from)
				 (block ?from)
				 (block ?to)
				 (empty ?to)
				 (sentinel ?thing)
				 (not (= ?from ?to)))
	     :effect (and (at ?thing ?to) (not (at ?thing ?from)) (empty ?from) (not (empty ?to))))
	     
  (:action GoRight
	     :parameters (?thing ?from ?to)
	     :precondition (and (isright ?to ?from)
				 (at ?thing ?from)
				 (block ?from)
				 (block ?to)
				 (empty ?to)
				 (sentinel ?thing)
				 (not (= ?from ?to)))
	     :effect (and (at ?thing ?to) (not (at ?thing ?from)) (empty ?from) (not (empty ?to))))
	     
  (:action GoLeft
	     :parameters (?thing ?from ?to)
	     :precondition (and (isright ?from ?to)
				 (at ?thing ?from)
				 (block ?from)
				 (block ?to)
				 (empty ?to)
				 (sentinel ?thing)
				 (not (= ?from ?to)))
	     :effect (and (at ?thing ?to) (not (at ?thing ?from)) (empty ?from) (not (empty ?to))))
	     
	     
  (:action PushLeft
	     :parameters (?s ?s_place ?c ?c_place ?new_place)
	     :precondition (and (isright ?s_place ?c_place)
	            (isright ?c_place ?new_place)
				 (at ?c ?c_place)
				 (at ?s ?s_place)
				 (block ?s_place)
				 (block ?c_place)
				 (block ?new_place)
				 (empty ?new_place)
				 (sentinel ?s)
				 (box ?c)
				 (not (= ?c_place ?new_place))
				 (not (= ?s_place ?c_place))
				 (not (= ?s_place ?new_place)))
	     :effect (and (at ?s ?c_place) (not (at ?s ?s_place)) (at ?c ?new_place) (not (at ?c ?c_place)) (empty ?s_place) (not (empty ?new_place))))
	     
	  (:action PushRight
	     :parameters (?s ?s_place ?c ?c_place ?new_place)
	     :precondition (and (isright ?c_place ?s_place)
	            (isright ?new_place ?c_place)
				 (at ?c ?c_place)
				 (at ?s ?s_place)
				 (block ?s_place)
				 (block ?c_place)
				 (block ?new_place)
				 (empty ?new_place)
				 (sentinel ?s)
				 (box ?c)
				 (not (= ?c_place ?new_place))
				 (not (= ?s_place ?c_place))
				 (not (= ?s_place ?new_place)))
	     :effect (and (at ?s ?c_place) (not (at ?s ?s_place)) (at ?c ?new_place) (not (at ?c ?c_place)) (empty ?s_place) (not (empty ?new_place))))
	     
	     	  (:action PushUp
	     :parameters (?s ?s_place ?c ?c_place ?new_place)
	     :precondition (and (isup ?c_place ?s_place)
	            (isup ?new_place ?c_place)
				 (at ?c ?c_place)
				 (at ?s ?s_place)
				 (block ?s_place)
				 (block ?c_place)
				 (block ?new_place)
				 (empty ?new_place)
				 (sentinel ?s)
				 (box ?c)
				 (not (= ?c_place ?new_place))
				 (not (= ?s_place ?c_place))
				 (not (= ?s_place ?new_place)))
	     :effect (and (at ?s ?c_place) (not (at ?s ?s_place)) (at ?c ?new_place) (not (at ?c ?c_place)) (empty ?s_place) (not (empty ?new_place))))
	     
	     	  (:action PushDown
	     :parameters (?s ?s_place ?c ?c_place ?new_place)
	     :precondition (and (isup ?s_place ?c_place)
	            (isup ?c_place ?new_place)
				 (at ?c ?c_place)
				 (at ?s ?s_place)
				 (block ?s_place)
				 (block ?c_place)
				 (block ?new_place)
				 (empty ?new_place)
				 (sentinel ?s)
				 (box ?c)
				 (not (= ?c_place ?new_place))
				 (not (= ?s_place ?c_place))
				 (not (= ?s_place ?new_place)))
	     :effect (and (at ?s ?c_place) (not (at ?s ?s_place)) (at ?c ?new_place) (not (at ?c ?c_place)) (empty ?s_place) (not (empty ?new_place))))
	     
  )